{"version":3,"sources":["SeasonDisplay.js","Spinner.js","App.js","reportWebVitals.js","index.js","SeasonDisplay.module.css"],"names":["seasonConfig","winter","text","iconName","summer","SeasonDisplay","props","lat","month","season","Date","getMonth","className","classes","IconLeft","IconRight","Spinner","children","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","error","message","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"8NAGMA,EAAa,CACfC,OAAO,CACHC,KAAK,sBACLC,SAAS,aAEbC,OAAO,CACHF,KAAK,qBACLC,SAAS,QAqBFE,EAXK,SAAAC,GAChB,IARaC,EAAIC,EAQXC,GAROF,EAQUD,EAAMC,KARZC,GAQgB,IAAIE,MAAOC,YAPlC,GAAKH,EAAQ,EACbD,EAAM,EAAI,SAAU,SAEpBA,EAAM,EAAI,SAAU,UAGP,EAEHP,EAAaS,GAA5BP,EAFkB,EAElBA,KAAKC,EAFa,EAEbA,SACV,OACA,sBAAKS,UAAS,UAAKC,IAAQR,cAAb,YAA8BQ,IAAQJ,IAApD,UACI,mBAAGG,UAAS,UAAOC,IAAQC,SAAf,wBAAuCX,EAAvC,WACZ,6BAAKD,IACL,mBAAGU,UAAS,UAAMC,IAAQE,UAAd,oBAAmCZ,EAAnC,eChBLa,EAVD,SAACV,GACX,OACE,qBAAKM,UAAU,mBAAf,SACI,qBAAKA,UAAU,qBAAf,SACIN,EAAMW,UAAY,kBC8BjBC,E,4MA5BXC,MAAM,CACJZ,IAAI,KACJa,aAAa,I,kEAIG,IAAD,OACjBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAAD,OAAY,EAAKC,SAAS,CAACnB,IAAIkB,EAASE,OAAOC,cAC/C,SAACC,GAAD,OAAS,EAAKH,SAAS,CAACN,aAAaS,EAAMC,e,+BAI7C,OAAIC,KAAKZ,MAAMZ,KAAOwB,KAAKZ,MAAMC,aAC1B,8BAAMW,KAAKZ,MAAMC,gBAEpBW,KAAKZ,MAAMC,cAAgBW,KAAKZ,MAAMZ,IAC/B,cAAC,EAAD,CAAeA,IAAKwB,KAAKZ,MAAMZ,MAGjC,cAAC,EAAD,mD,GAtBMyB,aCOJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,SAAW,gCAAgC,UAAY,iCAAiC,OAAS,8BAA8B,IAAM,2BAA2B,cAAgB,wC","file":"static/js/main.c1d00320.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './SeasonDisplay.module.css';\n\nconst seasonConfig={\n    winter:{\n        text:\"Let's hit the beach\",\n        iconName:'snowflake'\n    },\n    summer:{\n        text:\"Burr, it is chilly\",\n        iconName:'sun'\n    }\n}\nconst getSeason=(lat,month)=>{\n   if(month > 2 && month < 9){\n       return lat > 0 ? 'summer' :'winter';\n   }else{\n       return lat > 0 ? 'winter' :'summer';\n   }\n}\nconst SeasonDisplay=props=>{\n    const season=getSeason(props.lat,new Date().getMonth());\n    let {text,iconName}=seasonConfig[season];\n    return (\n    <div className={`${classes.SeasonDisplay} ${classes[season]}`}>\n        <i className={  `${classes.IconLeft}     massive ${iconName} icon`} />\n        <h1>{text}</h1>\n        <i className={ `${classes.IconRight} massive ${iconName} icon`} />\n    </div>\n    );\n}\nexport default SeasonDisplay;","import React from 'react'\nconst Spinner=(props)=>{\n    return(\n      <div className=\"ui active dimmer\">\n          <div className=\"ui big text loader\">\n             {props.children || 'Loading...'}\n          </div>\n      </div>\n    );\n}\n\nexport default Spinner;","import React, { Component } from 'react'\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\n\n\nclass  App extends Component {\n  \n    state={\n      lat:null,\n      errorMessage:''\n    }\n  \n  \n  componentDidMount(){\n    window.navigator.geolocation.getCurrentPosition(\n      (position)=>this.setState({lat:position.coords.latitude}),\n      (error)=>this.setState({errorMessage:error.message})\n    );\n  }\n  render() {\n    if(!this.state.lat && this.state.errorMessage){\n    return <div>{this.state.errorMessage}</div>\n    }\n    if(!this.state.errorMessage && this.state.lat){\n      return   <SeasonDisplay lat={this.state.lat} />\n    }\n    else{\n      return <Spinner > Please accept location request </Spinner>\n    }\n    \n  }\n\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"IconLeft\":\"SeasonDisplay_IconLeft__rUdj4\",\"IconRight\":\"SeasonDisplay_IconRight__t_ngA\",\"winter\":\"SeasonDisplay_winter__3GzT7\",\"sun\":\"SeasonDisplay_sun__3ldcN\",\"SeasonDisplay\":\"SeasonDisplay_SeasonDisplay__nHYc7\"};"],"sourceRoot":""}